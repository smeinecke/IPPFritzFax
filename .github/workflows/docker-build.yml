name: Build and Push Multi-Platform Docker Image

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag (e.g., v1.0.0)'
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CACHE_FROM: cache-from=type=gha
  CACHE_TO: cache-to=type=gha,mode=max

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write
      actions: read

    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
          image: tonistiigi/binfmt:latest
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: network=host
          install: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  create-manifest:
    name: Create and push manifest
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: network=host
          install: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Create and push manifest
        run: |
          # Get the base image name without tag, ensuring it's lowercase
          IMAGE_BASE="${{ env.REGISTRY }}/$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')
          
          # Get the tags from the metadata output
          TAGS="${{ steps.meta.outputs.tags }}"
          
          # Process each tag
          for tag in $TAGS; do
            # Extract just the tag part (after the last colon)
            TAG_PART="${tag##*:}"
            
            # Skip if it's a SHA tag
            if [[ "$TAG_PART" == sha-* ]]; then
              echo "Skipping SHA tag: $tag"
              continue
            fi
            
            echo "Creating manifest for tag: $tag"
            
            # Create the manifest
            docker manifest create $IMAGE_BASE:$TAG_PART \
              --amend $IMAGE_BASE:$TAG_PART-amd64 \
              --amend $IMAGE_BASE:$TAG_PART-arm64 \
              --amend $IMAGE_BASE:$TAG_PART-armv7
            
            # Annotate the platform-specific manifests
            docker manifest annotate $IMAGE_BASE:$TAG_PART $IMAGE_BASE:$TAG_PART-amd64 --arch amd64 --os linux
            docker manifest annotate $IMAGE_BASE:$TAG_PART $IMAGE_BASE:$TAG_PART-arm64 --arch arm64 --os linux --variant v8
            docker manifest annotate $IMAGE_BASE:$TAG_PART $IMAGE_BASE:$TAG_PART-armv7 --arch arm --os linux --variant v7
            
            # Push the manifest
            echo "Pushing manifest for $IMAGE_BASE:$TAG_PART"
            docker manifest push $IMAGE_BASE:$TAG_PART
            
            # If this is the 'main' tag, also tag it as 'latest'
            if [[ "$TAG_PART" == "main" ]]; then
              echo "Also tagging as 'latest'"
              docker manifest create $IMAGE_BASE:latest \
                --amend $IMAGE_BASE:$TAG_PART-amd64 \
                --amend $IMAGE_BASE:$TAG_PART-arm64 \
                --amend $IMAGE_BASE:$TAG_PART-armv7
              
              docker manifest annotate $IMAGE_BASE:latest $IMAGE_BASE:$TAG_PART-amd64 --arch amd64 --os linux
              docker manifest annotate $IMAGE_BASE:latest $IMAGE_BASE:$TAG_PART-arm64 --arch arm64 --os linux --variant v8
              docker manifest annotate $IMAGE_BASE:latest $IMAGE_BASE:$TAG_PART-armv7 --arch arm --os linux --variant v7
              
              docker manifest push $IMAGE_BASE:latest
            fi
          done
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
