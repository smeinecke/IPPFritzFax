name: Build and Push Multi-Platform Docker Image

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag (e.g., v1.0.0)'
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Use GitHub's cache URL prefix to ensure this cache is only used for this repo
  CACHE_FROM: cache-from=type=gha
  CACHE_TO: cache-to=type=gha,mode=max

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: read

    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
          image: tonistiigi/binfmt:latest
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: network=host
          install: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Create manifest and push
        if: github.event_name != 'pull_request' && matrix.platform == 'linux/amd64'
        run: |
          # Create and push a multi-arch manifest for the tags
          export MANIFEST_TAGS=""
          for tag in ${{ join(steps.meta.outputs.tags, ' ') }}; do
            # Skip the SHA tag for the manifest
            if [[ ! $tag == *"@sha256:"* ]]; then
              MANIFEST_TAGS="$MANIFEST_TAGS ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${tag#*:}"
            fi
          done
          
          if [ -n "$MANIFEST_TAGS" ]; then
            # Create the manifest for each tag
            for tag in $MANIFEST_TAGS; do
              docker manifest create $tag \
                --amend $tag-amd64 \
                --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${tag#*:}-arm64 \
                --amend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${tag#*:}-armv7
              
              # Annotate the platform-specific manifests
              docker manifest annotate $tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${tag#*:}-amd64 --arch amd64 --os linux
              docker manifest annotate $tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${tag#*:}-arm64 --arch arm64 --os linux --variant v8
              docker manifest annotate $tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${tag#*:}-armv7 --arch arm --os linux --variant v7
              
              # Push the manifest
              docker manifest push $tag
            done
          fi
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
